project.ext {

	targetRepositories = ["http://download.eclipse.org/releases/indigo/",
                          "http://rodin-b-sharp.sourceforge.net/updates",
                          "http://rodin-b-sharp.sourceforge.net/core-updates",
                          "http://downloads.efxclipse.org/p2-repos/releases/latest"]	

	groupID = "de.prob2"

	excludeFromTychoBuild = ["de.prob.core.kernel"]
	excludeFromClassPath = [ 'de.prob.ui.rodin', 'de.prob2.feature' ]		// Projects defined here will also be exluded from changes of MF File
	excludeManifestClassPathDelete = ['de.prob.ui.worksheet']		// Projects defined here will still have classpath changes but no changes in the MF File
}


apply from: 'tycho_build.gradle'

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}



project(':de.prob.core.rodin'){
	
	// Currently not in use
	task switchToBuildMF()<<{
		def standardMF = new File(workspacePath+"${project.name}/META-INF/MANIFEST.MF")
		def buildMF = new File(workspacePath+"${project.name}/BUILD-META/MANIFEST.MF")
		standardMF.delete()
		standardMF << buildMF.text
	}
	//currently not in use
	task switchToStandardMF()<<{
		def standardMF = new File(workspacePath+"${project.name}/BUILD-META/OLD_MANIFEST.MF")
		def buildMF = new File(workspacePath+"${project.name}/META-INF/MANIFEST.MF")
		buildMF.delete()
		buildMF << standardMF.text
		
	}	
	
	
	task generateMF()<<{
		
		prepareMF("de.prob.ui/META-INF/MANIFEST.MF", "de.prob.ui/META-INF/MF.MF")	
		//prepareMF("de.prob.rodin.core/META-INF/MANIFEST.MF", "de.prob.rodin.core/META-INF/MF.MF")
	}
	
}


void prepareMF(def MF, def MF_C){
	String exports = getExportedPackages()
	//println exports
	
	def oldMF = new File( workspacePath + MF).getText("UTF-8")
	def mf = new File( workspacePath + MF_C)
	mf.delete()
	def lib = getLibs()
	
	def setExports = { 
		if( it ==~ /Export-Package:.*/ )  it = it + ",\n" + exports

		if( it ==~ /Bundle-ClassPath: .(\ |\t)*/ ) it = it + ",\n" + lib
		if( it ==~ /Bundle-ClassPath: .(\ |\t)*,(\ |\t)*/ ) it = it + "\n" + lib + ","
		it = it.replaceAll(",( |\t)*,",",")
		mf << it+"\n"
		//}																//
	}
	oldMF.eachLine(setExports)
	def oldManiF = new File(workspacePath+MF)
	oldManiF.delete()
	mf.renameTo(workspacePath+MF)
}

task deleteOldArtifacts(type: Delete) {
  	String updateSite = workspacePath+'updatesite'
	delete updateSite
}

task collectArtifacts(type:Copy) {
	    from workspacePath + groupID+'.repository/target/repository/'
	    into workspacePath + 'updatesite'
	    from workspacePath + "index.html"
	    into workspacePath + 'updatesite'
	    from workspacePath + "main.css"
	    into workspacePath + 'updatesite'
}

subprojects{
	apply plugin: 'eclipse'


	task magic(dependsOn: ['clean', 'cleanEclipse', 'eclipse', 'deleteFromClassPath','setClassPath']) {
      doFirst {
println """\
          __-----_.                        ______\n\
          /  \\      \\           o  O  O   _(      )__\n\
         /    |  |   \\_---_   o._.      _(           )_\n\
        |     |            \\   | |\\"\"\"\"(_   I have no   )\n\
        |     |             |@ | |    (_ idea what I'm _)\n\
         \\___/   ___       /   | |      (__  doing   _)\n\
           \\____(____\\___/     | |         (________)\n\
           |__|                | |          |\n\
           /   \\-_             | |         |'\n\
         /      \\_ \"__ _       !_!--v---v--\"\n\
        /         \"|  |>)      |\"\"\"\"\"\"\"\"|\n\
       |          _|  | ._--\"\"||        |\n\
       _\\_____________|_|_____||________|_\n\
      /                                   \\\n\
     /_____________________________________\\\n\
     /                                     \\\n\
    /_______________________________________\\\n\
    /                                       \\\n\
   /_________________________________________\\\n\
        {                               }\n\
        <_______________________________|\n\
        |                               >\n\
        {_______________________________|            \n\
        <                               }            \n\
        |_______________________________|            \n\
\\|/       \\\\/             \\||//           |//        \n\
"""
		

      }
	}
}


// collects the Libs from de.prob.core.rodin for the build
def getLibs(){
	def dependencyList = []
	//try{
		def dir = new File(workspacePath+"de.prob.core.rodin"+"/"+dependencyFolder).eachFile() { file->  		
	    	if( !(file.getName() ==~/.*\.txt/) ){
				dependencyList << file.getName()  
			}
		}
	//}catch( FileNotFoundException e ){
	//	println "No libraries found please run 'gradle collectDependencies' or 'gradle setClassPath'"
	//}
	
	dependencyList = dependencyList.sort()
	
	String libs = ""
	for( int i = 0; i < dependencyList.size; i ++ ){

		if( i > 0 )	 libs = libs +",\n " + dependencyFolder+dependencyList[i]
		else		 libs = libs+" " + dependencyFolder+dependencyList[i]	
		
	}
	return libs
	
}

// Gets the exported Packages from kernel
def String getExportedPackages(){
	def exportList = []
	def content = new File(workspacePath+"de.prob.core.kernel/META-INF/MANIFEST.MF").getText("UTF-8") 
	boolean catchEntries = false

	def getExports = { 
		
		if(it ==~ /[A-Z].*/) catchEntries = false
		
		if( catchEntries )   exportList << it
			
		if(  it ==~ /Export-Package:.*\,(\ |\t)*/ ){
			catchEntries = true
			it = it.replaceAll( "Export-Package:", '' )
			exportList << it
		}
	}

	content.eachLine( getExports )
	String exports = ""
	for( int i = 0; i < exportList.size; i ++ ){
		if( i >= ( exportList.size - 1 ) ){
			exports = exports = exports + "\n" + exportList[i]
		}else{
			if( i > 0 )	 exports = exports +"\n" + exportList[i]
			else		 exports = exports + exportList[i]	
		}
	}
	

	return exports
}




task remove_tycho_data << {

	delete{
	 delete  'de.prob.core.kernel/pom.xml',
	       'de.prob.core.rodin/pom.xml',
	       'de.prob.core.rodin/target/',
	       'de.prob.ui.rodin/pom.xml',
	       'de.prob.ui.rodin/target/',
	       'de.prob.ui/pom.xml',
	       'de.prob.ui/target/',
	       'de.prob2.feature/pom.xml',
	       'de.prob2.feature/target/',
	       'de.prob2.parent/',
	       'de.prob2.repository/',
	       'updatesite'
	}
}
