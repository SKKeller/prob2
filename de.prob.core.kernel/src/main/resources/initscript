/* This overwrites the asType method in String to allow the conversion from
   a String to an EvalElement. Usage:
       "..." as ClassicalB converts "..." to a ClassicalB evaluation element
       "..." as EventB converts "..." to an EventB evaluation element
*/

def oldStringAsType = String.metaClass.getMetaMethod("asType", [Class] as Class[])
def oldArrayListAsType = ArrayList.metaClass.getMetaMethod("asType", [Class] as Class[])


String.metaClass.asType = { Class type -> 
       if (type == ClassicalB) return new ClassicalB(delegate) 
       if (type == EventB) return new EventB(delegate) 
       oldStringAsType.invoke(delegate, [type] as Class[])
}


ArrayList.metaClass.asType = { Class type -> 
		if (type == Tuple) return new Tuple(delegate[0],delegate[1]) 
		def c = new Class[1]
        c[0] = type
        oldArrayListAsType.invoke(delegate, c)
}


/* Redirect print and println to our own buffered console*/
Script.getMetaClass().print = { s -> __console.append(s) }
Script.getMetaClass().println = { s -> __console.append(s+"\n") }