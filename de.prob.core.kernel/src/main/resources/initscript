/* This overwrites the asType method in String to allow the conversion from
   a String to an EvalElement. Usage:
       "..." as ClassicalB converts "..." to a ClassicalB evaluation element
       "..." as EventB converts "..." to an EventB evaluation element
*/

def oldStringAsType = String.metaClass.getMetaMethod("asType", [Class] as Class[])
def oldArrayListAsType = ArrayList.metaClass.getMetaMethod("asType", [Class] as Class[])


String.metaClass.asType = { Class type -> 
       if (type == ClassicalB) return new ClassicalB(delegate) 
       if (type == EventB) return new EventB(delegate) 
       if (type == CSP) return new CSP(delegate)
       oldStringAsType.invoke(delegate, [type] as Class[])
}

ArrayList.metaClass.to { Class type ->
	def c = []
	if (type == ClassicalB ) delegate.each { c << (it as ClassicalB) }
	if (type == EventB ) delegate.each { c << (it as EventB) }
	if (type == CSP) delegate.each { c << (it as CSP) }
	return c
}

ArrayList.metaClass.asType = { Class type -> 
		if (type == Tuple) return new Tuple(delegate[0],delegate[1]) 
		def c = new Class[1]
        c[0] = type
        oldArrayListAsType.invoke(delegate, c)
}

transform = { s,c ->
	new Transformer(s).with c
}


/* Redirect print and println to our own buffered console*/
Script.getMetaClass().print = { s -> __console.append(s) }
Script.getMetaClass().println = { s -> __console.append(s+"\n") }


api.metaClass.eventb_load { file -> 
        def root = org.rodinp.core.RodinCore.valueOf(file).getRoot();
		def eventBTranslator = new de.prob.rodin.translate.EventBTranslator(root); 
		def ebfactory = api.modelFactoryProvider.getEventBFactory();
		def model = ebfactory.load(eventBTranslator.getMainComponent(),
				eventBTranslator.getMachines(), eventBTranslator.getContexts(),
				eventBTranslator.getModelFile());
				
		def   writer = new java.io.StringWriter();
		def pto = new java.io.PrintWriter(writer);
		try {
			de.prob.ui.eventb.internal.TranslatorFactory.translate(root, pto);
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		}

		def s = model.getStatespace();

		def p2 = java.util.regex.Pattern.compile("^package\\((.*?)\\)\\.");
		def m2 = p2.matcher(writer.toString());
		m2.find();
		def cmd = m2.group(1);

		s.execute(new de.prob.animator.command.LoadEventBCommand(cmd));
		s.execute(new de.prob.animator.command.StartAnimationCommand());
				
		model		
				
		}
		 
