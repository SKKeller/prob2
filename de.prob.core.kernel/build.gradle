apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'findbugs'
//apply plugin: 'eclipse-wtp'
//apply plugin: 'war'
//apply plugin: 'jetty'


project.group = 'de.prob'
sourceCompatibility = 1.6
def gradle_version = '1.0-rc-3'

project.version = '2.0.0-milestone-14-SNAPSHOT'

repositories {
	maven {
		name "cobra"
		url "http://cobra.cs.uni-duesseldorf.de/artifactory/repo"
	}
}


tasks.withType(FindBugs){ ignoreFailures = true }

configurations.all { resolutionStrategy.cacheChangingModulesFor 0, 'seconds' }


def  ft = findbugsMain.classes
ft.exclude '**/org/codehaus/groovy/tools/shell/*','**/SpockDomWalkerTest.class',"**/de/prob/scripting/Downloader*.class","**/de/prob/scripting/InteractiveCommand*.class"
findbugsMain.classes = files(ft.files) // explicit list of files

def  ftc = findbugsTest.classes
ftc.exclude '**/SpockDomWalkerTest*'
findbugsTest.classes = files(ftc.files) // explicit list of files


sourceSets.main.java.srcDirs = [
	'src/main/generated'] // ie there's no stand-alone java source
sourceSets.main.groovy.srcDir 'src/main/java' // ie include the 'java' dir as groovy source

def parser_version = '2.4.22-SNAPSHOT'

configurations { // configuration that holds jars to copy into lib
	releaseJars 
}

dependencies {

 	//groovy 'org.codehaus.groovy:groovy-all:2.0.5'

	compile 'com.google.guava:guava:14.0.1'// Apache Licence 2.0
	compile 'commons-cli:commons-cli:1.2' // Apache Licence 2.0

	compile 'commons-lang:commons-lang:2.6' // Replace by guava 15 once it is released (used in GroovyShellServlet)

	compile 'org.codehaus.groovy:groovy-all:2.3.0' // Apache Licence 2.0
	//	compile 'org.fusesource.jansi:jansi:1.5' // Apache Licence 2.0
	//	compile 'jline:jline:0.9.94' // BSD

	compile 'org.pegdown:pegdown:1.1.0' // Apache Licence 2.0

	compile 'com.google.inject:guice:3.0' // Apache Licence 2.0
	compile 'com.google.inject.extensions:guice-servlet:3.0' // Apache Licence 2.0
	compile 'org.slf4j:slf4j-api:1.6.1' // MIT
	compile 'ch.qos.logback:logback-core:0.9.29' // EPL
	compile 'ch.qos.logback:logback-classic:0.9.29' // EPL

	compile 'net.sf.jung:jung-jai:2.0.1'
	compile 'net.sf.jung:jung-graph-impl:2.0.1'
	compile 'net.sf.jung:jung-api:2.0.1'
	compile 'net.sf.jung:jung-algorithms:2.0.1'

	compile 'com.thoughtworks.xstream:xstream:1.4.3' // BSD

	compile 'org.eventb:org.eventb.core.ast:2.6.0.r15029' // Rodin

	compile 'commons-codec:commons-codec:1.6' // Apache Licence 2.0
	compile 'com.google.code.gson:gson:1.7.1' // Apache Licence 2.0

	// If you consider to update or downgrade jetty ... just don't
	// it'll make you puke 
	compile 'org.eclipse.jetty:jetty-io:8.0.0.M3' // EPL
	compile 'org.eclipse.jetty:jetty-server:8.0.0.M3' // EPL
	compile 'org.eclipse.jetty:jetty-servlet:8.0.0.M3' // EPL
	compile 'org.eclipse.jetty:jetty-util:8.0.0.M3' // EPL
	compile 'org.eclipse.jetty:jetty-webapp:8.0.0.M3' // EPL

	compile 'org.antlr:antlr4-runtime:4.0'
	compile 'de.prob:ltl-dsl:1.0.0'
	
	compile 'org.jsoup:jsoup:1.7.2' // MIT

	compile group: "de.prob", name: "answerparser", version: parser_version , changing: true
	compile group: "de.prob", name: "bparser", version: parser_version , changing: true
	compile group: "de.prob", name: "cliparser", version: parser_version , changing: true
	compile group: "de.prob", name: "ltlparser", version: parser_version , changing: true
	compile group: "de.prob", name: "parserbase", version: parser_version , changing: true
	compile group: "de.prob", name: "prologlib", version: parser_version , changing: true
	compile group: "de.prob", name: "unicode", version: parser_version , changing: true
	compile group: "de.prob", name: "theorymapping", version: parser_version, changing: true
	
	compile group: 'de.prob', name: 'tla2bAST', version: '1.0.5-SNAPSHOT', changing: true

	compile group: 'net.java.dev.jna', name: 'jna', version: '3.4.0'

	compile group: 'edu.berkeley.eecs.ptolemy', name: 'jfmi', version: '1.0.2-SNAPSHOT'
	
	
    compile group: 'de.prob', name: 'tla2bAST', version: '1.0.5-SNAPSHOT'

	compile 'junit:junit:4.8.2'
	compile 'org.spockframework:spock-core:0.7-groovy-2.0'
	compile 'com.github.spullara.mustache.java:compiler:0.8.12' // Apache Licence 2.0
	
	compile 'org.jsoup:jsoup:1.7.2'

	testCompile 'org.mockito:mockito-core:1.8.5'
	testCompile "org.gebish:geb-spock:0.9.1"
	testCompile 'org.seleniumhq.selenium:selenium-htmlunit-driver:2.26.0'

}

task createBuildConstants  {
	doFirst {
		def buildconstants_class = """
version=${project.version}"""
		File f = file("src/main/resources/build.properties")
		f.delete()
		f <<  buildconstants_class
	}
}



compileJava { dependsOn= [createBuildConstants]}

def listJars() {
	enumerateClasses()
	def cp = sourceSets.main.runtimeClasspath
	def deps = cp.collect { it.getName() }
	def jars = deps.findAll {it.endsWith(".jar")}
	def prefix = jars.collect { "lib/"+it }
	return prefix.inject(".") {str, item -> str + " " +item}
}


jar {
	from sourceSets.main.allJava
    //from configurations.releaseJars.collect { it.isDirectory() ? it : zipTree(it) }
	manifest {
		attributes 'Main-Class': 'de.prob.Main'
		attributes 'Class-Path': listJars()
	}
}


task pack(type: Sync) {
	from configurations.runtime
	into "$buildDir/libs/lib"
}

def enumerateClasses() {
	def folder = configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	Properties<String, String> p = new Properties<String, String>()
	folder.each { tree ->
		tree.each {File file ->
			def m = file.toString() =~ '.*/expandedArchives/[a-zA-Z0-9\\._-]*/(.*).class'
			if (m.size() > 0) {
				String match = m[0][1]
				def fqn = match.replaceAll('/', '.');
				int pos = fqn.lastIndexOf('.')
				def pack  = pos > 0 ? fqn[0..pos-1] : ""
				if (fqn.indexOf("\$") == -1)
					p.setProperty(fqn, pack)
			}
		}
	}
	def ft2 = fileTree(dir: 'bin')
	ft2.each { File file ->
		def m = file.toString() =~ '.*/de.prob.core.kernel/bin/(.*).class'
		if (m.size() > 0) {
			String match = m[0][1]
			def fqn = match.replaceAll('/', '.');
			int pos = fqn.lastIndexOf('.')
			def pack  = pos > 0 ? fqn[0..pos-1] : ""
			if (fqn.indexOf("\$") == -1)
				p.setProperty(fqn, pack)
		}
	}
	def fn = projectDir.getAbsolutePath()+"/src/main/resources/classmap.properties"
	File f = new File(fn)
	FileOutputStream fos = new FileOutputStream(f)
	p.store(fos, "Classes (fqn) mapped to a the package name")
	fos.close()
}


task deployKernel(dependsOn: [jar, test], group: 'Build', type: Zip) {
	description = 'Assembles the uberjar and runs all tests.'
	from "$buildDir/libs/"
	doLast { println "Created install-zip in build/distributions" }
}

test { ignoreFailures=true }

test.doFirst { systemProperties['integrationtest'] = 'true' }

groovydoc {
	docTitle="ProB Core "+project.version
}

task wrapper(type: Wrapper) { gradleVersion = gradle_version }

def download(address,target) {
	def file = new FileOutputStream(target)
	def out = new BufferedOutputStream(file)
	out << new URL(address).openStream()
	out.close()
}

public  String getProBDirectory() {
	String homedir = System.getProperty("prob.home");
	if (homedir != null)
		return homedir + java.io.File.separator;
	return System.getProperty("user.home") + java.io.File.separator + ".prob"
	+ java.io.File.separator;
}


task downloadCli << {
	def dir = getProBDirectory();
	delete file(dir)
	new File(dir).mkdirs()
	def targetdir = dir
	def targetzip = dir+os_extension()+".zip"
	def url = "http://nightly.cobra.cs.uni-duesseldorf.de/cli/" +os_extension()+ ".zip"
	download(url,targetzip)
	FileTree zip = zipTree(targetzip)
	copy {
		from zip
		into targetdir
	}
	delete file(targetzip)
}


def os_extension() {
	def bits = System.getProperty("sun.arch.data.model");
	def os = System.getProperty("os.name").toLowerCase()
	if (os.indexOf("mac") > -1) {
		return "probcli_leopard64"
	}
	if (os.indexOf("win") > -1 ) {
		return "probcli_win32"
	}
	else return "probcli_linux" + (bits.equals("64") ? "64": "")
}




task integrationtests(dependsOn: ['classes', 'downloadCli'], type:JavaExec){
	main = 'de.prob.Main'
	classpath = sourceSets.main.runtimeClasspath
	args = ['-test', 'groovyTests']
}

eclipse {
	project {
		name = 'de.prob.core.kernel'
		natures   'org.eclipse.pde.PluginNature'
		buildCommand   'org.eclipse.pde.ManifestBuilder'
		buildCommand 'org.eclipse.pde.SchemaBuilder'
	}
}


magic.dependsOn createBuildConstants
magic.dependsOn deployKernel
